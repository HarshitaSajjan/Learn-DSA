#include<bits/stdc++.h>
using namespace std;
/*
int main(){
    int arr[3][2] ={{10,20},{30,40},{50,60}};

    for(int i=0; i<3; i++)
        for(int j=0; j<2;j++)
        cout<<arr[i][j]<<" ";

    return 0;
}
*/
/*
Elements are stored in row-major order ie. stored in contigous locations

internal curly brackets are optional
int arr[3][2]={10,20,30,40,50,60};

only the first dimension can be ommitted when qwe initialize

int arr[][2]= {{1,2},{3,4}}
int arr[][2][2]={{{1,2},{3,4}}{{5,6}{7,8}}
*/
//Method1
int main(){
    int m=3, n=2;
    int arr[m][n];
    for(int i=0; i<m; i++)
        for(int j=0; j<n; j++)
            arr[i][j]=i+j;
    
    for(int i=0; i<m; i++)
        for(int j=0;j<n; j++)
            cout<<arr[i][j]<<" ";

    return 0;
}

//Method2 - double pointer -> dp which point to array of pointers, and array of pointer points to dynamically allocated array of size n, disadv is not cache friendly adv is can take dimension as array and work for any array
int main(){
    int m=3, n=2;
    int **arr;
    arr= new int*[m];
    for(int i=0; i<m; i++)
        arr[i] = new int[n];
    for(int i=0; i<m; i++)
        for(int j=0; j<n; j++){
            arr[i][j]=10;
            cout<<arr[i][j]<<" ";
        }
}

//Method3 - array of pointers 
int main(){
    int m=3, n=2;
    int *arr[m];
    for(int i=0; i<m; i++)
        arr[i] = new int[n];

    for(int i=0; i<m; i++)
        for(int j=0; j<n; j++){
            arr[i][j]=10;
            cout<<arr[i][j]<<" ";
        }       
}


//Method4 - array of vectors
int main(){
    int m=3, n=2;
    vector<int>arr[m];
    for(int i=0; i<m; i++)
        for(int j=0; j<n; j++)
        arr[i].push_back(10);

    for(int i=0; i<m; i++)
        for(int j=0;j<n;j++)
        cout<<arr[i][j]<<" ";
}

//not as friendly as simple 2d arrayss
// indivisual rowsare of dynamic sizes
//easy  to pass to a function

//Methodd 5 - Vector of Vectors 
int main(){
    int m=3, n=2;
    vector<vector<int>>arr;
    for(int i=0; i<m; i++){
        vector<int>v;
        for(int j=0; j<n;j++)
            v.push_back(10);
        arr.push_back(v);  
    }
    for(int i=0; i<arr.size(); i++)
        for(int j=0;j<arr.size(); i++)
            cout<<arr[i][j]<<" ";
}
